import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report
import itertools
from tensorflow.keras.models import load_model

# Importing Saved Models
model_path = 'C:/'  
Cancer_Classification_Model = load_model(model_path)

# Defining test_datagen
test_datagen = ImageDataGenerator(rescale=1./255)  

test_generator = test_datagen.flow_from_directory(
    "C:/shin-CNN-set/U87_10h_test4",  
    target_size=(640, 480),
    batch_size=8,
    class_mode='categorical',   
    shuffle=False
)

# Performing predictions on a test dataset
test_generator.reset()
prob = Cancer_Classification_Model.predict(test_generator)
y_pred = np.argmax(prob, axis=1)
y_true = test_generator.classes

# Print a taxonomy report
target_names = ['Mock', 'Lipofectamine', 'Scramble', 'Transfection']   
print(classification_report(y_true, y_pred, target_names=target_names, zero_division=0))

# Define a confusion matrix visualization function
def plot_confusion_matrix(cm, classes, normalize=False, title='Confusion matrix', cmap=plt.cm.Blues):
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')
    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

# Create and visualize confusion matrices
cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(5, 5))
plot_confusion_matrix(cm, classes=target_names, normalize=False, title='Confusion Matrix')
plt.show()
